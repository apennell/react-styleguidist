// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderer should render preview 1`] = `
<div
  className="root"
  data-testid="name-example-0"
>
  <div
    className="preview pizza"
    data-preview="name"
    title="salami"
  >
    <div>
      preview
    </div>
  </div>
  <div
    className="controls"
  >
    <div>
      <div>
        tab buttons
      </div>
    </div>
    <div
      className="toolbar"
    >
      <div>
        toolbar
      </div>
    </div>
  </div>
  <div
    className="tab"
  >
    <div>
      tab body
    </div>
  </div>
</div>
`;

exports[`should include padded class if padded option is passed in example settings 1`] = `
<Playground
  classes={
    Object {
      "controls": "controls",
      "padded": "padded",
      "preview": "preview",
      "root": "root",
      "tab": "tab",
      "toolbar": "toolbar",
    }
  }
  code=
<button>
  OK
</button>

  evalInContext={[Function]}
  exampleMode="collapse"
  index={0}
  name="name"
  settings={
    Object {
      "padded": true,
    }
  }
>
  <Styled(Playground)
    exampleIndex={0}
    name="name"
    padded={true}
    preview={
      <Preview
        code=
<button>
  OK
</button>

        evalInContext={[Function]}
      />
    }
    previewProps={Object {}}
    tabBody={
      <Slot
        name="exampleTabs"
        onlyActive={true}
        props={
          Object {
            "code": 
<button>
  OK
</button>
,
            "evalInContext": [Function],
            "onChange": [Function],
          }
        }
      />
    }
    tabButtons={
      <Slot
        name="exampleTabButtons"
        props={
          Object {
            "onClick": [Function],
          }
        }
      />
    }
    toolbar={
      <Slot
        name="exampleToolbar"
        props={
          Object {
            "example": 0,
            "isolated": false,
            "name": "name",
          }
        }
      />
    }
  >
    <PlaygroundRenderer
      classes={
        Object {
          "controls": "rsg--controls-2",
          "padded": "rsg--padded-5",
          "preview": "rsg--preview-1",
          "root": "rsg--root-0",
          "tab": "rsg--tab-4",
          "toolbar": "rsg--toolbar-3",
        }
      }
      exampleIndex={0}
      name="name"
      padded={true}
      preview={
        <Preview
          code=
<button>
  OK
</button>

          evalInContext={[Function]}
        />
      }
      previewProps={Object {}}
      tabBody={
        <Slot
          name="exampleTabs"
          onlyActive={true}
          props={
            Object {
              "code": 
<button>
  OK
</button>
,
              "evalInContext": [Function],
              "onChange": [Function],
            }
          }
        />
      }
      tabButtons={
        <Slot
          name="exampleTabButtons"
          props={
            Object {
              "onClick": [Function],
            }
          }
        />
      }
      toolbar={
        <Slot
          name="exampleToolbar"
          props={
            Object {
              "example": 0,
              "isolated": false,
              "name": "name",
            }
          }
        />
      }
    >
      <div
        className="rsg--root-0"
        data-testid="name-example-0"
      >
        <div
          className="rsg--preview-1 rsg--padded-5"
          data-preview="name"
        >
          <Preview
            code=
<button>
  OK
</button>

            evalInContext={[Function]}
          >
            <div />
          </Preview>
        </div>
        <div
          className="rsg--controls-2"
        >
          <div>
            <Slot
              name="exampleTabButtons"
              props={
                Object {
                  "onClick": [Function],
                }
              }
            >
              <div>
                <CodeTabButton
                  key="0"
                  name="rsg-code-editor"
                  onClick={[Function]}
                >
                  <Styled(TabButton)
                    name="rsg-code-editor"
                    onClick={[Function]}
                  >
                    <TabButtonRenderer
                      classes={
                        Object {
                          "button": "rsg--button-7",
                          "isActive": "rsg--isActive-8",
                        }
                      }
                      name="rsg-code-editor"
                      onClick={[Function]}
                    >
                      <button
                        className="rsg--button-7"
                        name="rsg-code-editor"
                        onClick={[Function]}
                        type="button"
                      >
                        View Code
                      </button>
                    </TabButtonRenderer>
                  </Styled(TabButton)>
                </CodeTabButton>
              </div>
            </Slot>
          </div>
          <div
            className="rsg--toolbar-3"
          >
            <Slot
              name="exampleToolbar"
              props={
                Object {
                  "example": 0,
                  "isolated": false,
                  "name": "name",
                }
              }
            >
              <div>
                <IsolateButton
                  example={0}
                  isolated={false}
                  key="0"
                  name="name"
                >
                  <Styled(ToolbarButton)
                    href="/#!/name/0"
                    testId="name-isolate-button"
                    title="Open isolated"
                  >
                    <ToolbarButtonRenderer
                      classes={
                        Object {
                          "button": "rsg--button-9",
                          "isSmall": "rsg--isSmall-10",
                        }
                      }
                      href="/#!/name/0"
                      testId="name-isolate-button"
                      title="Open isolated"
                    >
                      <a
                        aria-label="Open isolated"
                        className="rsg--button-9"
                        data-testid="name-isolate-button"
                        href="/#!/name/0"
                        title="Open isolated"
                      >
                        <MdFullscreen>
                          <IconBase
                            attr={
                              Object {
                                "viewBox": "0 0 24 24",
                              }
                            }
                          >
                            <svg
                              fill="currentColor"
                              height="1em"
                              stroke="currentColor"
                              strokeWidth="0"
                              style={
                                Object {
                                  "color": undefined,
                                }
                              }
                              viewBox="0 0 24 24"
                              width="1em"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"
                                key="0"
                              />
                            </svg>
                          </IconBase>
                        </MdFullscreen>
                      </a>
                    </ToolbarButtonRenderer>
                  </Styled(ToolbarButton)>
                </IsolateButton>
              </div>
            </Slot>
          </div>
        </div>
        <div
          className="rsg--tab-4"
        >
          <Slot
            name="exampleTabs"
            onlyActive={true}
            props={
              Object {
                "code": 
<button>
  OK
</button>
,
                "evalInContext": [Function],
                "onChange": [Function],
              }
            }
          />
        </div>
      </div>
    </PlaygroundRenderer>
  </Styled(Playground)>
</Playground>
`;

exports[`should not include padded class if padded option is not passed in example settings 1`] = `
<Playground
  classes={
    Object {
      "controls": "controls",
      "padded": "padded",
      "preview": "preview",
      "root": "root",
      "tab": "tab",
      "toolbar": "toolbar",
    }
  }
  code=
<button>
  OK
</button>

  evalInContext={[Function]}
  exampleMode="collapse"
  index={0}
  name="name"
  settings={
    Object {
      "padded": false,
    }
  }
>
  <Styled(Playground)
    exampleIndex={0}
    name="name"
    padded={false}
    preview={
      <Preview
        code=
<button>
  OK
</button>

        evalInContext={[Function]}
      />
    }
    previewProps={Object {}}
    tabBody={
      <Slot
        name="exampleTabs"
        onlyActive={true}
        props={
          Object {
            "code": 
<button>
  OK
</button>
,
            "evalInContext": [Function],
            "onChange": [Function],
          }
        }
      />
    }
    tabButtons={
      <Slot
        name="exampleTabButtons"
        props={
          Object {
            "onClick": [Function],
          }
        }
      />
    }
    toolbar={
      <Slot
        name="exampleToolbar"
        props={
          Object {
            "example": 0,
            "isolated": false,
            "name": "name",
          }
        }
      />
    }
  >
    <PlaygroundRenderer
      classes={
        Object {
          "controls": "rsg--controls-2",
          "padded": "rsg--padded-5",
          "preview": "rsg--preview-1",
          "root": "rsg--root-0",
          "tab": "rsg--tab-4",
          "toolbar": "rsg--toolbar-3",
        }
      }
      exampleIndex={0}
      name="name"
      padded={false}
      preview={
        <Preview
          code=
<button>
  OK
</button>

          evalInContext={[Function]}
        />
      }
      previewProps={Object {}}
      tabBody={
        <Slot
          name="exampleTabs"
          onlyActive={true}
          props={
            Object {
              "code": 
<button>
  OK
</button>
,
              "evalInContext": [Function],
              "onChange": [Function],
            }
          }
        />
      }
      tabButtons={
        <Slot
          name="exampleTabButtons"
          props={
            Object {
              "onClick": [Function],
            }
          }
        />
      }
      toolbar={
        <Slot
          name="exampleToolbar"
          props={
            Object {
              "example": 0,
              "isolated": false,
              "name": "name",
            }
          }
        />
      }
    >
      <div
        className="rsg--root-0"
        data-testid="name-example-0"
      >
        <div
          className="rsg--preview-1"
          data-preview="name"
        >
          <Preview
            code=
<button>
  OK
</button>

            evalInContext={[Function]}
          >
            <div />
          </Preview>
        </div>
        <div
          className="rsg--controls-2"
        >
          <div>
            <Slot
              name="exampleTabButtons"
              props={
                Object {
                  "onClick": [Function],
                }
              }
            >
              <div>
                <CodeTabButton
                  key="0"
                  name="rsg-code-editor"
                  onClick={[Function]}
                >
                  <Styled(TabButton)
                    name="rsg-code-editor"
                    onClick={[Function]}
                  >
                    <TabButtonRenderer
                      classes={
                        Object {
                          "button": "rsg--button-7",
                          "isActive": "rsg--isActive-8",
                        }
                      }
                      name="rsg-code-editor"
                      onClick={[Function]}
                    >
                      <button
                        className="rsg--button-7"
                        name="rsg-code-editor"
                        onClick={[Function]}
                        type="button"
                      >
                        View Code
                      </button>
                    </TabButtonRenderer>
                  </Styled(TabButton)>
                </CodeTabButton>
              </div>
            </Slot>
          </div>
          <div
            className="rsg--toolbar-3"
          >
            <Slot
              name="exampleToolbar"
              props={
                Object {
                  "example": 0,
                  "isolated": false,
                  "name": "name",
                }
              }
            >
              <div>
                <IsolateButton
                  example={0}
                  isolated={false}
                  key="0"
                  name="name"
                >
                  <Styled(ToolbarButton)
                    href="/#!/name/0"
                    testId="name-isolate-button"
                    title="Open isolated"
                  >
                    <ToolbarButtonRenderer
                      classes={
                        Object {
                          "button": "rsg--button-9",
                          "isSmall": "rsg--isSmall-10",
                        }
                      }
                      href="/#!/name/0"
                      testId="name-isolate-button"
                      title="Open isolated"
                    >
                      <a
                        aria-label="Open isolated"
                        className="rsg--button-9"
                        data-testid="name-isolate-button"
                        href="/#!/name/0"
                        title="Open isolated"
                      >
                        <MdFullscreen>
                          <IconBase
                            attr={
                              Object {
                                "viewBox": "0 0 24 24",
                              }
                            }
                          >
                            <svg
                              fill="currentColor"
                              height="1em"
                              stroke="currentColor"
                              strokeWidth="0"
                              style={
                                Object {
                                  "color": undefined,
                                }
                              }
                              viewBox="0 0 24 24"
                              width="1em"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"
                                key="0"
                              />
                            </svg>
                          </IconBase>
                        </MdFullscreen>
                      </a>
                    </ToolbarButtonRenderer>
                  </Styled(ToolbarButton)>
                </IsolateButton>
              </div>
            </Slot>
          </div>
        </div>
        <div
          className="rsg--tab-4"
        >
          <Slot
            name="exampleTabs"
            onlyActive={true}
            props={
              Object {
                "code": 
<button>
  OK
</button>
,
                "evalInContext": [Function],
                "onChange": [Function],
              }
            }
          />
        </div>
      </div>
    </PlaygroundRenderer>
  </Styled(Playground)>
</Playground>
`;

exports[`should render component renderer 1`] = `
<Styled(Playground)
  exampleIndex={0}
  name="name"
  padded={false}
  preview={
    <Preview
      code=
<button>
  OK
</button>

      evalInContext={[Function]}
    />
  }
  previewProps={Object {}}
  tabBody={
    <Slot
      name="exampleTabs"
      onlyActive={true}
      props={
        Object {
          "code": 
<button>
  OK
</button>
,
          "evalInContext": [Function],
          "onChange": [Function],
        }
      }
    />
  }
  tabButtons={
    <Slot
      name="exampleTabButtons"
      props={
        Object {
          "onClick": [Function],
        }
      }
    />
  }
  toolbar={
    <Slot
      name="exampleToolbar"
      props={
        Object {
          "example": 0,
          "isolated": false,
          "name": "name",
        }
      }
    />
  }
/>
`;
